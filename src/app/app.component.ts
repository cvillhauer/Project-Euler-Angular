import { Component } from '@angular/core';

import { Problem } from '../../src/app/problem';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  public problems: Problem[] = [];

  constructor(){
    //PROBLEM 1
    let problem1 = new Problem(1, "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.");
    problem1.solveProblem = function(): void { 
      let n: number = 1000;
      let i: number = 1;
      let result: number = 0;
      for(i = 1; i < n; i++){
        if(i % 3 == 0 || i % 5 == 0){
          result = result + i;
        }
      }
      this.result = result; 
    };
    this.problems.push(problem1);

    //PROBLEM 2
    let problem2 = new Problem(2, "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");
    problem2.solveProblem = function(): void { 
      let n: number = 4000000;
      let i: number = 1;
      let j: number = 1;
      let k: number = 1;
      let result: number = 0;
      while(i <= n){
        if(i % 2 == 0){
          result = result + i;
        }
        k = i + j;
        j = i;
        i = k;
      }
      this.result = result;
    };
    this.problems.push(problem2);

    //PROBLEM 3
    let problem3 = new Problem(3, "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?");
    problem3.solveProblem = function(): void { 
      let n: number = 600851475143;
      let i: number = 2;
      let result: number = 0;
      for(i = 2; i <= (Math.sqrt(n)); i++) //The largest possible factor of a number is the square root of the number.
      {
        if(n % i == 0) //This is a factor
        {
          if(this.isPrime(i))
          {
            result = i;
          }
        }
      }
      this.result = result;
    };
    this.problems.push(problem3);



    //PROBLEM 7
    let problem7 = new Problem(7, "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10 001st prime number?");
    problem7.solveProblem = function(): void { 
      let n: number = 10001;
      let currentNumber: number = 2; //We'll count 2 as a prime number by default
      let result: number = 0;
      
      for(let primeCount = 1; primeCount < n; currentNumber++)
      { 
        if(this.isPrime(currentNumber))
        {
          primeCount = primeCount + 1;
          result = currentNumber;
        }
      }
      this.result = result; 
    };
    this.problems.push(problem7);
  }
}
